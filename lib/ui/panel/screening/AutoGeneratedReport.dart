import 'package:Neuronio/blocs/EntityBloc.dart';
import 'package:Neuronio/constants/assets.dart';
import 'package:Neuronio/constants/colors.dart';
import 'package:Neuronio/constants/strings.dart';
import 'package:Neuronio/models/PatientEntity.dart';
import 'package:Neuronio/models/Screening.dart';
import 'package:Neuronio/ui/widgets/AutoText.dart';
import 'package:Neuronio/ui/widgets/DocupHeader.dart';
import 'package:Neuronio/ui/widgets/ICAAreaChart.dart';
import 'package:Neuronio/ui/widgets/PageTopLeftIcon.dart';
import 'package:Neuronio/ui/widgets/VerticalSpace.dart';
import 'package:Neuronio/utils/CrossPlatformDeviceDetection.dart';
import 'package:Neuronio/utils/Utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_radar_chart/flutter_radar_chart.dart';

class ReportData {
  final PatientEntity userEntity;
  final String screeningDateString;
  final ICATestScores icaTestScores;

  ReportData(this.userEntity, this.screeningDateString, this.icaTestScores);
}

class AutoGeneratedReport extends StatefulWidget {
  final Function(String, dynamic, dynamic, dynamic, Function) onPush;
  final int screeningStepId;

  AutoGeneratedReport({@required this.onPush, this.screeningStepId});

  @override
  _AutoGeneratedReportState createState() => _AutoGeneratedReportState();
}

class _AutoGeneratedReportState extends State<AutoGeneratedReport> {
  ReportData reportData;

  // void _initialApiCall() {}

  @override
  void dispose() {
    super.dispose();
  }

  @override
  void initState() {
    /// TODO
    reportData = ReportData(
        BlocProvider.of<EntityBloc>(context).state.entity.mEntity
            as PatientEntity,
        "1399/25/20",
        ICATestScores(
            icaIndex: 78,
            attention: 50,
            accuracy: 80,
            accuracyMaintenance: 30,
            speed: 98,
            speedMaintenance: 70));
  }

  @override
  Widget build(BuildContext context) {
    return _mainWidget();
    // StreamBuilder<Response<Screening>>(
    //   stream: _screeningBloc.apiStream,
    //   builder: (context, snapshot) {
    //     if (snapshot.hasData) {
    //       switch (snapshot.data.status) {
    //         case Status.LOADING:
    //           return DocUpAPICallLoading2();
    //           break;
    //         case Status.COMPLETED:
    //           screening = snapshot.data.data;
    //           return _mainWidget(snapshot.data.data);
    //           break;
    //         case Status.ERROR:
    //           return APICallError(() {
    //             _initialApiCall();
    //           });
    //           break;
    //         default:
    //           return APICallError(() {
    //             _initialApiCall();
    //           });
    //       }
    //     }
    //     return Container();
    //   });
  }

  Widget _mainWidget() {
    return SingleChildScrollView(
      child: Container(
        child: Column(
          children: <Widget>[
            PageTopLeftIcon(
              topLeft: Icon(
                Icons.arrow_back,
                size: 25,
              ),
              onTap: () {
                Navigator.pop(context);
              },
              topRightFlag: true,
              topRight: NeuronioHeader(
                title: "گزارش بیمار",
                docUpLogo: false,
              ),
              topLeftFlag: CrossPlatformDeviceDetection.isIOS,
            ),
            patientInfo(),
            _itemContainer([
              _testItemTable(
                  "تست سنجش یکپارچه شناخت",
                  "",
                  50,
                  100,
                  [
                    "Normal",
                    "MCI",
                    "AD",
                  ],
                  0,
                  descriptionFlag: true,
                  extraRowsWidgets: <List<Widget>>[
                    [
                      Column(
                        children: [
                          AutoText("میزان دقت"),
                          Container(
                            width: 40,
                            height: 2,
                            color: IColors.darkGrey,
                          ),
                          AutoText(
                              reportData.icaTestScores.accuracy.toString()),
                        ],
                      ),
                      Column(
                        children: [
                          AutoText("میزان سرعت"),
                          Container(
                            width: 40,
                            height: 2,
                            color: IColors.darkGrey,
                          ),
                          AutoText(reportData.icaTestScores.speed.toString()),
                        ],
                      ),
                      Column(
                        children: [
                          AutoText("میزان توجه"),
                          Container(
                            width: 40,
                            height: 2,
                            color: IColors.darkGrey,
                          ),
                          AutoText(
                              reportData.icaTestScores.attention.toString()),
                        ],
                      ),
                    ],
                    [
                      Column(
                        children: [
                          AutoText("تداوم سرعت"),
                          Container(
                            width: 40,
                            height: 2,
                            color: IColors.darkGrey,
                          ),
                          AutoText(reportData.icaTestScores.speedMaintenance
                              .toString()),
                        ],
                      ),
                      Column(
                        children: [
                          AutoText("تداوم دقت"),
                          Container(
                            width: 10,
                            height: 2,
                            color: IColors.darkGrey,
                          ),
                          AutoText(reportData.icaTestScores.accuracyMaintenance
                              .toString()),
                        ],
                      ),
                    ]
                  ])
            ]),
            _itemContainer([
              _radarChartAndGuid(),
            ]),
            _itemContainer([_icaScoreChart()]),
            _itemContainer([
              _testItemTable(
                  "تست حافظه",
                  "memory test",
                  0,
                  15,
                  [
                    "normal",
                    "mild depression",
                    "moderate depression",
                    "severe depression"
                  ],
                  2,
                  descriptionFlag: true,
                  statusDescription: "hello from the other side ...."),
              ALittleVerticalSpace(
                height: 30,
              ),
              _testItemTable(
                  "تست حافظه",
                  "memory test",
                  0,
                  15,
                  [
                    "normal",
                    "mild depression",
                    "moderate depression",
                    "severe depression"
                  ],
                  2,
                  descriptionFlag: true,
                  statusDescription: "hello from the other side ....")
            ]),
            _itemContainer([patientDescriptionAndAdvise()]),
            _itemContainer([AutoText(ReportStrings.comeBack6MonthLater)]),
            supportAndContactUs()
          ],
        ),
      ),
    );
  }

  Widget supportAndContactUs() {
    return Column(
      children: [
        AutoText(
          "در مسیر سلامتی همراهتان هستیم",
          fontSize: 18,
          fontWeight: FontWeight.bold,
        ),
        ALittleVerticalSpace(
          height: 10,
        ),
        AutoText(
          "کلینیک هوشمند نورونیو",
          fontSize: 16,
          color: IColors.themeColor,
          fontWeight: FontWeight.normal,
        ),
        ALittleVerticalSpace(
          height: 10,
        ),
        GestureDetector(
          onTap: () {
            launchURL(InAppStrings.appSiteLink);
          },
          child: AutoText(
            InAppStrings.appSiteLink,
            style: TextStyle(
              decoration: TextDecoration.underline,
              fontSize: 17,
              color: IColors.themeColor,
            ),
          ),
        ),
      ],
    );
  }

  Widget _testItemTable(String persianTitle, String englishTitle, int score,
      int totalScore, List<String> allScoreLevels, int scoreLevel,
      {bool descriptionFlag = false,
      String statusDescription,
      String advise,
      List<List<Widget>> extraRowsWidgets}) {
    double titleHeight = 60;
    double scoreDetailHeight = 60;
    return Container(
      child: Column(
        children: [
          Container(
            height: titleHeight,
            decoration: BoxDecoration(
                color: IColors.themeColor,
                border: Border.all(color: IColors.darkGrey, width: 2)),
            padding: EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.max,
              children: [
                AutoText(
                  englishTitle,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
                AutoText(
                  persianTitle,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                )
              ],
            ),
          ),
          Container(
            height: scoreDetailHeight,
            decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: IColors.darkGrey, width: 2)),
            padding: EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                Row(
                  children: [
                    Container(
                        padding: EdgeInsets.all(3.0),
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(10)),
                            color: IColors.themeColor),
                        child: AutoText(allScoreLevels[scoreLevel]))
                    // for (int i = 0; i < allScoreLevels.length; i++)
                    //   Container(
                    //       padding: EdgeInsets.all(3.0),
                    //       decoration: BoxDecoration(
                    //           borderRadius:
                    //               BorderRadius.all(Radius.circular(10)),
                    //           color: i == scoreLevel
                    //               ? IColors.themeColor
                    //               : Color.fromARGB(0, 0, 0, 0)),
                    //       child: AutoText(allScoreLevels[i]))
                  ],
                ),
                VerticalDivider(
                  thickness: 2,
                  color: IColors.darkGrey,
                ),
                AutoText("وضعیت", fontWeight: FontWeight.bold),
                VerticalDivider(
                  thickness: 2,
                  color: IColors.darkGrey,
                ),
                AutoText(
                  score.toString() + "/" + totalScore.toString(),
                  fontWeight: FontWeight.bold,
                ),
                VerticalDivider(
                  thickness: 2,
                  color: IColors.darkGrey,
                ),
                AutoText("امتیاز کلی", fontWeight: FontWeight.bold),
              ],
            ),
          ),
          extraRowsWidgets == null
              ? SizedBox()
              : (Column(
                  children: [
                    for (List<Widget> rowWidgets in extraRowsWidgets)
                      Container(
                        decoration: BoxDecoration(
                            color: Colors.white,
                            border:
                                Border.all(color: IColors.darkGrey, width: 2)),
                        padding: EdgeInsets.all(8.0),
                        child: Row(
                          mainAxisSize: MainAxisSize.max,
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: rowWidgets,
                        ),
                      ),
                  ],
                )),
          !descriptionFlag
              ? SizedBox()
              : Container(
                  height: 60,
                  decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border.all(color: IColors.darkGrey, width: 2)),
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisSize: MainAxisSize.max,
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      AutoText(
                        statusDescription,
                      ),
                      VerticalDivider(
                        thickness: 2,
                        color: IColors.darkGrey,
                      ),
                      AutoText("شرح وضعیت", fontWeight: FontWeight.bold),
                    ],
                  ),
                ),
          !descriptionFlag
              ? SizedBox()
              : Container(
                  height: 60,
                  decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border.all(color: IColors.darkGrey, width: 2)),
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisSize: MainAxisSize.max,
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      AutoText(
                        advise,
                      ),
                      VerticalDivider(
                        thickness: 2,
                        color: IColors.darkGrey,
                      ),
                      AutoText("توصیه", fontWeight: FontWeight.bold),
                    ],
                  ),
                ),
        ],
      ),
    );
  }

  Widget _radarChartAndGuid() {
    double diagonal = MediaQuery.of(context).size.width * 0.6;
    return Column(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        AutoText(ReportStrings.yourHealthCognitiveLevelGuid),
        Container(
          width: diagonal,
          height: diagonal,
          child: RadarChart(
            ticks: [0, 20, 40, 60, 80, 100],
            features: reportData.icaTestScores.featuresTitle,
            graphColors: [IColors.green, IColors.blue],
            data: [reportData.icaTestScores.featuresValues] +
                [ICATestScores.healthyPatientFeaturesValue()],
            featuresTextStyle: TextStyle(
                fontSize: 13,
                color: IColors.black,
                fontWeight: FontWeight.bold),
            sides: reportData.icaTestScores.featuresTitle.length,
          ),
        ),
        Row(
          mainAxisSize: MainAxisSize.max,
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            Row(
              children: [
                AutoText("کاربر سالم"),
                Icon(
                  Icons.circle,
                  color: IColors.blue,
                ),
              ],
            ),
            Row(
              children: [
                AutoText("نمره کاربر"),
                Icon(
                  Icons.circle,
                  color: IColors.green,
                ),
              ],
            )
          ],
        )
      ],
    );
  }

  Widget patientDescriptionAndAdvise() {
    Widget item(String asset, String title, String description) {
      {
        return Container(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  AutoText(
                    title,
                    fontWeight: FontWeight.bold,
                    fontSize: 13,
                  ),
                  Container(
                    width: 5,
                  ),
                  Image.asset(
                    asset,
                    height: 50,
                    width: 50,
                  )
                ],
              ),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 8.0, vertical: 15),
                child: Row(
                  mainAxisSize: MainAxisSize.max,
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    AutoText(
                      description,
                      fontWeight: FontWeight.w100,
                      fontSize: 13,
                    ),
                  ],
                ),
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(15),
                    color: Colors.white),
              )
            ],
          ),
        );
      }
    }

    return Column(
      children: [
        item(Assets.sleep, "خواب", "jrkjsegrjsnergu nsth "),
        item(Assets.meal, "تغذیه", "jrkjsegrjsnergu nsth "),
        item(Assets.physicalActivity, "فعالیت فیزیکی", "jrkjsegrjsnergu nsth "),
        item(Assets.cognitiveActivity, "فعالیت شناختی/ذهنی",
            "jrkjsegrjsnergu nsth "),
        item(
            Assets.socialInteraction, "تعامل اجتماعی", "jrkjsegrjsnergu nsth "),
        item(Assets.badHabits, "عادات ناسالم", "jrkjsegrjsnergu nsth "),
        item(
            Assets.backgroundSickness,
            "بیماریهای زمینه ای تاثیرگذار بر سلامت شناختی",
            "jrkjsegrjsnergu nsth "),
      ],
    );
  }

  Widget _icaScoreChart() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        AutoText(ReportStrings.compareIcaScoreGuid),
        Container(
          // width: diagonal,
          // height: diagonal,
          child: ICAAreaChart(
            age: reportData?.userEntity?.age,
            icaIndex: reportData.icaTestScores.icaIndex,
          ),
        ),
      ],
    );
  }

  Widget _itemContainer(List<Widget> children) {
    return Container(
      decoration: BoxDecoration(
          border: Border.all(color: IColors.themeColor, width: 3)),
      margin: EdgeInsets.all(8.0),
      padding: EdgeInsets.all(8.0),
      child: Column(children: children),
    );
  }

  Widget patientInfo() {
    Widget infoItem(String title, String value, {int fontSize = 16}) {
      return Padding(
        padding: EdgeInsets.symmetric(horizontal: 8.0, vertical: 2.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 3.0),
              child: AutoText(value),
            ),
            Padding(
              padding: const EdgeInsets.all(0),
              child: AutoText(title + ":"),
            ),
          ],
        ),
      );
    }

    return Container(
      decoration: BoxDecoration(
          border: Border.all(color: IColors.themeColor, width: 3)),
      margin: EdgeInsets.all(8.0),
      child: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: AutoText(
                    "مشخصات سلامت‌جو",
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Icon(Icons.person_pin_outlined),
              ],
            ),
          ),
          infoItem("نام و نام خانوادگی", reportData.userEntity.fullName),
          infoItem("تاریخ تولد", reportData.userEntity.birthDate),
          infoItem("کد ملی", reportData.userEntity.user.nationalId),
          infoItem("تاریخ ارزیابی", reportData.screeningDateString),
        ],
      ),
    );
  }
}
